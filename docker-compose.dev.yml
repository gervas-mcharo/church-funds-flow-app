version: '3.8'

services:
  # Development Traefik (simpler config)
  traefik:
    image: traefik:v3.0
    container_name: traefik-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.dev.yml:/etc/traefik/traefik.yml:ro
    networks:
      - traefik
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - supabase
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgREST API
  postgrest:
    image: postgrest/postgrest:v12.0.2
    container_name: postgrest-dev
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supabase
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-dev.rule=Host(`localhost`) && PathPrefix(`/rest/`)"
      - "traefik.http.services.api-dev.loadbalancer.server.port=3000"

  # GoTrue Authentication
  gotrue:
    image: supabase/gotrue:v2.151.0
    container_name: gotrue-dev
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}?search_path=auth
      GOTRUE_SITE_URL: http://localhost
      GOTRUE_URI_ALLOW_LIST: http://localhost,http://localhost:3000,http://localhost:8080
      GOTRUE_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_MAILER_AUTOCONFIRM: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supabase
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-dev.rule=Host(`localhost`) && PathPrefix(`/auth/`)"
      - "traefik.http.services.auth-dev.loadbalancer.server.port=9999"

  # Supabase Studio
  studio:
    image: supabase/studio:20240326-5e5586d
    container_name: studio-dev
    restart: unless-stopped
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DEFAULT_ORGANIZATION_NAME: "Church Management Dev"
      DEFAULT_PROJECT_NAME: "Church App Dev"
      SUPABASE_URL: http://localhost/rest
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      - meta
    networks:
      - supabase
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.studio-dev.rule=Host(`localhost`) && PathPrefix(`/admin/`)"
      - "traefik.http.services.studio-dev.loadbalancer.server.port=3000"

  # PG Meta
  meta:
    image: supabase/postgres-meta:v0.80.0
    container_name: meta-dev
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: postgres
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-postgres}
      PG_META_DB_USER: ${POSTGRES_USER:-postgres}
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supabase

  # Storage API
  storage:
    image: supabase/storage-api:v1.0.6
    container_name: storage-dev
    restart: unless-stopped
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      POSTGREST_URL: http://postgrest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
    volumes:
      - storage_dev_data:/var/lib/storage
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supabase
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.storage-dev.rule=Host(`localhost`) && PathPrefix(`/storage/`)"
      - "traefik.http.services.storage-dev.loadbalancer.server.port=5000"

  # Development Frontend (with hot reload)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: frontend-dev
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_SUPABASE_URL=http://localhost/rest
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-dev.rule=Host(`localhost`)"
      - "traefik.http.services.frontend-dev.loadbalancer.server.port=3000"

networks:
  traefik:
    external: false
  supabase:
    external: false

volumes:
  postgres_dev_data:
  storage_dev_data: