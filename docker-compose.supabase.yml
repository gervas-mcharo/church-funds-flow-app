version: '3.8'

# Docker Compose configuration for enhanced Supabase local development
# This complements the official Supabase CLI with additional services

networks:
  supabase_network:
    external: true
    name: supabase_network_${PROJECT_NAME:-church_mgmt}

services:
  # Traefik reverse proxy for host-based routing
  traefik:
    image: traefik:v3.0
    container_name: traefik-supabase
    restart: unless-stopped
    networks:
      - supabase_network
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.supabase.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.supabase.yml:/etc/traefik/dynamic.yml:ro
      - traefik_logs:/var/log/traefik
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Frontend application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: frontend-supabase
    restart: unless-stopped
    networks:
      - supabase_network
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./index.html:/app/index.html:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./vite.config.ts:/app/vite.config.ts:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./tsconfig.app.json:/app/tsconfig.app.json:ro
      - ./tailwind.config.ts:/app/tailwind.config.ts:ro
      - ./postcss.config.js:/app/postcss.config.js:ro
      - ./components.json:/app/components.json:ro
      - node_modules_cache:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_SUPABASE_URL=http://api.localhost
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_SUPABASE_MODE=local
      - VITE_SUPABASE_LOCAL_URL=http://api.localhost
      - VITE_SUPABASE_LOCAL_ANON_KEY=${SUPABASE_ANON_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.middlewares=cors-frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      # CORS middleware for frontend
      - "traefik.http.middlewares.cors-frontend.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors-frontend.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.cors-frontend.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors-frontend.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors-frontend.headers.addvaryheader=true"
    depends_on:
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service discovery and health monitor
  service-monitor:
    image: curlimages/curl:latest
    container_name: service-monitor
    restart: unless-stopped
    networks:
      - supabase_network
    command: >
      sh -c "
        echo 'Service Monitor Started';
        while true; do
          echo '=== Service Health Check ===';
          echo 'API (PostgREST): ' && (curl -sf http://api.localhost/health || echo 'DOWN');
          echo 'Auth (GoTrue): ' && (curl -sf http://auth.localhost/health || echo 'DOWN');
          echo 'Storage: ' && (curl -sf http://storage.localhost/status || echo 'DOWN');
          echo 'Studio: ' && (curl -sf http://studio.localhost || echo 'DOWN');
          echo 'Frontend: ' && (curl -sf http://localhost || echo 'DOWN');
          echo '========================';
          sleep 60;
        done
      "
    depends_on:
      - traefik

volumes:
  traefik_logs:
    driver: local
  node_modules_cache:
    driver: local

# External networks created by Supabase CLI
# The Supabase CLI creates its own network that we connect to